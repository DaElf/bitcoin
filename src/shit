  { "getblockcount",          &getblockcount,          true,   false,     "getblockcount\nReturns the number of blocks in the longest block chain." },
  { "getconnectioncount",     &getconnectioncount,     true,   false,     "getconnectioncount\nReturns the number of connections to other nodes." },
  { "getdifficulty",          &getdifficulty,          true,   false,     "getdifficulty\nReturns the difficulty as a multiple of the minimum difficulty." },
  { "getgenerate",            &getgenerate,            true,   false,     "getgenerate\nReturns true or false." },
  { "gethashespersec",        &gethashespersec,        true,   false,     "gethashespersec\nReturns a recent hashes per second performance measurement while generating." },
  { "getinfo",                &getinfo,                true,   false,     "getinfo\nReturns an object containing various state info." },
  { "getmininginfo",          &getmininginfo,          true,   false,     "getmininginfo\nReturns an object containing mining-related information." },
  { "getpeerinfo",            &getpeerinfo,            true,   false,     "getpeerinfo\nReturns data about each connected network node." },
  { "help",                   &help,                   true,   true,      "help [command]\nList commands, or get help for a command." },
  { "stop",                   &stop,                   true,   true,      "stop <detach>\n<detach> is true or false to detach the database or not for this stop only\nStop 2GiveCoin server (and possibly override the detachdb config value)." },
  { "setgenerate",            &setgenerate,            true,   false,     "setgenerate <generate> [genproclimit]\n<generate> is true or false to turn generation on or off.\nGeneration is limited to [genproclimit] processors, -1 is unlimited." },
  { "getnewaddress",          &getnewaddress,          true,   false,     "getnewaddress [account]\nReturns a new 2GiveCoin address for receiving payments.\nIf [account] is specified (recommended), it is added to the address book\nso payments received with the address will be credited to [account]." },
  { "getnewpubkey",           &getnewpubkey,           true,   false,     "getnewpubkey [account]\nReturns new public key for coinbase generation." },
  { "getaccountaddress",      &getaccountaddress,      true,   false,     "getaccountaddress <account>\nReturns the current 2GiveCoin address for receiving payments to this account." },
  { "setaccount",             &setaccount,             true,   false,     "setaccount <2GiveCoinaddress> <account>\nSets the account associated with the given address." },
  { "getaccount",             &getaccount,             false,  false,     "getaccount <2GiveCoinaddress>\nReturns the account associated with the given address." },
  { "getaddressesbyaccount",  &getaddressesbyaccount,  true,   false,     "getaddressesbyaccount <account>\nReturns the list of addresses for the given account." },
  { "sendtoaddress",          &sendtoaddress,          false,  false,     "sendtoaddress <2GiveCoinaddress> <amount> [comment] [comment-to]\n<amount> is a real and is rounded to the nearest 0.000001" },
  { "getreceivedbyaddress",   &getreceivedbyaddress,   false,  false,     "getreceivedbyaddress <2GiveCoinaddress> [minconf=1]\nReturns the total amount received by <2GiveCoinaddress> in transactions with at least [minconf] confirmations." },
  { "getreceivedbyaccount",   &getreceivedbyaccount,   false,  false,     "getreceivedbyaccount <account> [minconf=1]\nReturns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations." },
  { "listreceivedbyaddress",  &listreceivedbyaddress,  false,  false,     "listreceivedbyaddress [minconf=1] [includeempty=false]\n[minconf] is the minimum number of confirmations before payments are included.\n[includeempty] whether to include addresses that haven't received any payments.\nReturns an array of objects containing:\n  \"address\" : receiving address\n  \"account\" : the account of the receiving address\n  \"amount\" : total amount received by the address\n  \"confirmations\" : number of confirmations of the most recent transaction included" },
  { "listreceivedbyaccount",  &listreceivedbyaccount,  false,  false,     "listreceivedbyaccount [minconf=1] [includeempty=false]\n[minconf] is the minimum number of confirmations before payments are included.\n[includeempty] whether to include accounts that haven't received any payments.\nReturns an array of objects containing:\n  \"account\" : the account of the receiving addresses\n  \"amount\" : total amount received by addresses with this account\n  \"confirmations\" : number of confirmations of the most recent transaction included" },
  { "backupwallet",           &backupwallet,           true,   false,     "backupwallet <destination>\nSafely copies wallet.dat to destination, which can be a directory or a path with filename." },
  { "keypoolrefill",          &keypoolrefill,          true,   false,     "keypoolrefill\nFills the keypool." },
  { "walletpassphrase",       &walletpassphrase,       true,   false,     "walletpassphrase <passphrase> <timeout> [mintonly]\nStores the wallet decryption key in memory for <timeout> seconds.\nmintonly is optional true/false allowing only block minting." },
  { "walletpassphrasechange", &walletpassphrasechange, false,  false,     "walletpassphrasechange <oldpassphrase> <newpassphrase>\nChanges the wallet passphrase from <oldpassphrase> to <newpassphrase>." },
  { "walletlock",             &walletlock,             true,   false,     "walletlock\nRemoves the wallet encryption key from memory, locking the wallet.\nAfter calling this method, you will need to call walletpassphrase again\nbefore being able to call any methods which require the wallet to be unlocked." },
  { "encryptwallet",          &encryptwallet,          false,  false,     "encryptwallet <passphrase>\nEncrypts the wallet with <passphrase>." },
  { "validateaddress",        &validateaddress,        true,   false,     "validateaddress <2GiveCoinaddress>\nReturn information about <2GiveCoinaddress>." },
  { "validatepubkey",         &validatepubkey,         true,   false,     "validatepubkey <2GiveCoinpubkey>\nReturn information about <2GiveCoinpubkey>." },
  { "getbalance",             &getbalance,             false,  false,     "getbalance [account] [minconf=1]\nIf [account] is not specified, returns the server's total available balance.\nIf [account] is specified, returns the balance in the account." },
  { "move",                   &movecmd,                false,  false,     "move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\nMove from one account in your wallet to another." },
  { "sendfrom",               &sendfrom,               false,  false,     "sendfrom <fromaccount> <to2GiveCoinaddress> <amount> [minconf=1] [comment] [comment-to]\n<amount> is a real and is rounded to the nearest 0.000001" }, // + HelpRequiringPassphrase()
  { "sendmany",               &sendmany,               false,  false,     "sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\namounts are double-precision floating point numbers" },
  { "addmultisigaddress",     &addmultisigaddress,     false,  false,     "addmultisigaddress <nrequired> <'[\"key\",\"key\"]'> [account]\nAdd a nrequired-to-sign multisignature address to the wallet\"\neach key is a 2GiveCoin address or hex-encoded public key\nIf [account] is specified, assign address to [account]." },
  { "getrawmempool",          &getrawmempool,          true,   false,     "getrawmempool\nReturns all transaction ids in memory pool." },
  { "getblock",               &getblock,               false,  false,     "getblock <hash> [txinfo]\ntxinfo optional to print more detailed tx info\nReturns details of a block with given block-hash." },
  { "getblockbynumber",       &getblockbynumber,       false,  false,     "getblockbynumber <number> [txinfo]\ntxinfo optional to print more detailed tx info\nReturns details of a block with given block-number." },
  { "getblockhash",           &getblockhash,           false,  false,     "getblockhash <index>\nReturns hash of block in best-block-chain at <index>." },
  { "gettransaction",         &gettransaction,         false,  false,     "gettransaction <txid>\nGet detailed information about <txid>" },
  { "listtransactions",       &listtransactions,       false,  false,     "listtransactions [account] [count=10] [from=0]\nReturns up to [count] most recent transactions skipping the first [from] transactions for account [account]." },
  { "listaddressgroupings",   &listaddressgroupings,   false,  false,     "listaddressgroupings\nLists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions" },
  { "signmessage",            &signmessage,            false,  false,     "signmessage <2GiveCoinaddress> <message>\nSign a message with the private key of an address" },
  { "verifymessage",          &verifymessage,          false,  false,     "verifymessage <2GiveCoinaddress> <signature> <message>\nVerify a signed message" },
  { "getwork",                &getwork,                true,   false,     "getwork [data]\nIf [data] is not specified, returns formatted hash data to work on:\n  \"midstate\" : precomputed hash state after hashing the first half of the data (DEPRECATED)\n  \"data\" : block data\n  \"hash1\" : formatted hash buffer for second hash (DEPRECATED)\n  \"target\" : little endian hash target\nIf [data] is specified, tries to solve the block and returns true if it was successful." },
  { "getworkex",              &getworkex,              true,   false,     "getworkex [data, coinbase]\nIf [data, coinbase] is not specified, returns extended work data.\n" },
  { "listaccounts",           &listaccounts,           false,  false,     "listaccounts [minconf=1]\nReturns Object that has account names as keys, account balances as values." },
  { "settxfee",               &settxfee,               false,  false,     "settxfee <amount>\n<amount> is a real and is rounded to the nearest 0.01" },
  { "getblocktemplate",       &getblocktemplate,       true,   false,     "getblocktemplate [params]\nReturns data needed to construct a block to work on:\n  \"version\" : block version\n  \"previousblockhash\" : hash of current highest block\n  \"transactions\" : contents of non-coinbase transactions that should be included in the next block\n  \"coinbaseaux\" : data that should be included in coinbase\n  \"coinbasevalue\" : maximum allowable input to coinbase transaction, including the generation award and transaction fees\n  \"target\" : hash target\n  \"mintime\" : minimum timestamp appropriate for next block\n  \"curtime\" : current timestamp\n  \"mutable\" : list of ways the block template may be changed\n  \"noncerange\" : range of valid nonces\n  \"sigoplimit\" : limit of sigops in blocks\n  \"sizelimit\" : limit of block size\n  \"bits\" : compressed target of next block\n  \"height\" : height of the next block\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification." },
  { "submitblock",            &submitblock,            false,  false,     "submitblock <hex data> [optional-params-obj]\n[optional-params-obj] parameter is currently ignored.\nAttempts to submit new block to network.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification." },
  { "listsinceblock",         &listsinceblock,         false,  false,     "listsinceblock [blockhash] [target-confirmations]\nGet all transactions in blocks since block [blockhash], or all transactions if omitted" },
  { "dumpprivkey",            &dumpprivkey,            false,  false,     "dumpprivkey <2GiveCoinaddress>\nReveals the private key corresponding to <2GiveCoinaddress>." },
  { "importprivkey",          &importprivkey,          false,  false,     "importprivkey <2GiveCoinprivkey> [label]\nAdds a private key (as returned by dumpprivkey) to your wallet." },
  { "listunspent",            &listunspent,            false,  false,     "listunspent [minconf=1] [maxconf=9999999]  [\"address\",...]\nReturns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filtered to only include txouts paid to specified addresses.\nResults are an array of Objects, each of which has:\n{txid, vout, scriptPubKey, amount, confirmations}" },
  { "getrawtransaction",      &getrawtransaction,      false,  false,     "getrawtransaction <txid> [verbose=0]\nIf verbose=0, returns a string that is\nserialized, hex-encoded data for <txid>.\nIf verbose is non-zero, returns an Object\nwith information about <txid>." },
  { "createrawtransaction",   &createrawtransaction,   false,  false,     "createrawtransaction [{\"txid\":txid,\"vout\":n},...] {address:amount,...}\nCreate a transaction spending given inputs\n(array of objects containing transaction id and output number),\nsending to given address(es).\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network." },
  { "decoderawtransaction",   &decoderawtransaction,   false,  false,     "decoderawtransaction <hex string>\nReturn a JSON object representing the serialized, hex-encoded transaction." },
  { "signrawtransaction",     &signrawtransaction,     false,  false,     "signrawtransaction <hex string> [{\"txid\":txid,\"vout\":n,\"scriptPubKey\":hex},...] [<privatekey1>,...] [sighashtype=\"ALL\"]\nSign inputs for raw transaction (serialized, hex-encoded).\n" },
  { "sendrawtransaction",     &sendrawtransaction,     false,  false,     "sendrawtransaction <hex string>\nSubmits raw transaction (serialized, hex-encoded) to local node and network." },
  { "getcheckpoint",          &getcheckpoint,          true,   false,     "getcheckpoint\nShow info of synchronized checkpoint." },
  { "reservebalance",         &reservebalance,         false,  true,      "reservebalance [<reserve> [amount]]\n<reserve> is true or false to turn balance reserve on or off.\n<amount> is a real and rounded to cent.\nSet reserve amount not participating in network protection.\nIf no parameters provided current setting is printed.\n" },
  { "checkwallet",            &checkwallet,            false,  true,      "checkwallet\nCheck wallet for integrity.\n" },
  { "repairwallet",           &repairwallet,           false,  true,      "repairwallet\nRepair wallet if checkwallet reports any problem.\n" },
  { "resendtx",               &resendtx,               false,  true,      "resendtx\nRe-send unconfirmed transactions.\n" },
  { "makekeypair",            &makekeypair,            false,  true,      "makekeypair [prefix]\nMake a public/private key pair.\n[prefix] is optional preferred prefix for the public key.\n" },
  { "sendalert",              &sendalert,              false,  false,     "sendalert <message> <privatekey> <minver> <maxver> <priority> <id> [cancelupto]\n<message> is the alert text message\n<privatekey> is hex string of alert master private key\n<minver> is the minimum applicable internal client version\n<maxver> is the maximum applicable internal client version\n<priority> is integer priority number\n<id> is the alert id\n[cancelupto] cancels all alert id's up to this number\nReturns true or false." },

